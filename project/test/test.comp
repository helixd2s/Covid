#version 460 core

// 
#extension GL_GOOGLE_include_directive : require

//
#include "lib/native.glsl"
#include "lib/raytracing.glsl"
#include "lib/random.glsl"
#include "lib/sphere.glsl"
#include "lib/fresnel.glsl"

//
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

//
vec3 reflective(in vec3 seed, in vec3 dir, in vec3 normal, in float roughness) {
  return normalize(mix(reflect(dir, normal), randomCosineWeightedHemispherePoint(seed, normal), roughness));
};

//
const vec4 skyColor = vec4(vec3(135.f,206.f,235.f)/vec3(255.f,255.f,255.f), 1.f);

//
RayData pathTrace(in RayData rayData) {
  //
  for (uint32_t i=0;i<3;i++) {
    if (luminance(rayData.energy.xyz) < 0.001f) { break; };

    // 
    vec4 finalPosition = vec4(0.f.xxx, 1.f);
    IntersectionInfo intersection = traceRaysOpaque(instancedData.opaqueAddressInfo, rayData, 10000.f);

    //
    if (!all(lessThanEqual(intersection.barycentric, 0.f.xxx))) {
      InstanceInfo instanceInfo = getInstance(instancedData.opaqueAddressInfo, intersection.instanceId);
      GeometryInfo geometryInfo = getGeometry(instanceInfo, intersection.geometryId);
      GeometryExtData geometry = getGeometryData(geometryInfo, intersection.primitiveId);
      GeometryExtAttrib attrib = interpolate(geometry, intersection.barycentric);

      //
      const vec4 texcoord = attrib.data[VERTEX_TEXCOORD];
      const vec4 vertice = fullTransform(instanceInfo, attrib.data[VERTEX_VERTICES], intersection.geometryId);
      //const vec3 normals = fullTransformNormal(instanceInfo, normalize(attrib.data[VERTEX_NORMALS].xyz), intersection.geometryId);

      //
      mat3x3 tbn = getTBN(attrib);
      MaterialPixelInfo materialPix = handleMaterial(getMaterialInfo(geometryInfo), texcoord.xy, tbn);
      const vec3 normals = inRayNormal(rayData.direction, fullTransformNormal(instanceInfo, attrib.data[VERTEX_NORMALS].xyz, intersection.geometryId));//materialPix.color[MATERIAL_NORMAL].xyz;

      // 
      vec4 emissiveColor = toLinear(materialPix.color[MATERIAL_EMISSIVE]);
      vec4 diffuseColor = toLinear(materialPix.color[MATERIAL_ALBEDO]);
      float metallicFactor = materialPix.color[MATERIAL_PBR].b;
      float roughnessFactor = materialPix.color[MATERIAL_PBR].g;

      //
      if (luminance(materialPix.color[MATERIAL_EMISSIVE].xyz) > 0.001f) {
        rayData.emission.xyz += f16vec3(trueMultColor(rayData.energy.xyz, emissiveColor.xyz));
        rayData.energy.xyz = f16vec3(trueMultColor(rayData.energy.xyz, 1.f-emissiveColor.xyz));
      };

      //
      vec3 originSeedXYZ = vec3(random(rayData.launchId.xy), random(rayData.launchId.xy), random(rayData.launchId.xy));
      if (random(rayData.launchId.xy) <= (metallicFactor + fresnel_schlick(0.f, dot(-rayData.direction.xyz, normals)) * (1.f - metallicFactor))) { // I currently, have no time for fresnel
        rayData.direction.xyz = reflective(originSeedXYZ, rayData.direction.xyz, normals, roughnessFactor);
        rayData.energy.xyz = f16vec3(metallicMult(rayData.energy.xyz, diffuseColor.xyz, metallicFactor));
      } else {
        rayData.direction.xyz = randomCosineWeightedHemispherePoint(originSeedXYZ, normals);
        rayData.energy.xyz = f16vec3(trueMultColor(rayData.energy.xyz, diffuseColor.xyz));
      };
      rayData.origin.xyz = vertice.xyz + outRayNormal(rayData.direction.xyz, normals.xyz) * 0.0001f;
    } else {
      rayData.emission.xyz += f16vec3(trueMultColor(rayData.energy.xyz, toLinear(skyColor.xyz)));
      rayData.energy.xyz *= f16vec3(0.f.xxx);
      break;
    }
  };
  return rayData;
};

//
#define USE_RASTERIZE_PASS

//
IntersectionInfo rasterize(in InstanceAddressInfo addressInfo, in RayData rayData, in float maxT) {
  const uvec4 indices = texelFetch(texturesU[framebufferAttachments[1]], ivec2(rayData.launchId), 0);
  const vec3 bary = texelFetch(textures[framebufferAttachments[0]], ivec2(rayData.launchId), 0).xyz;

  IntersectionInfo intersection;
  intersection.barycentric = bary.xyz;
  intersection.instanceId = indices[0];
  intersection.geometryId = indices[1];
  intersection.primitiveId = indices[2];
  return intersection;
};

// 
void main() {
  const uvec2 gcoord = gl_GlobalInvocationID.xy;
  const vec2 tCoord = vec2(gcoord)/vec2(extent);

  //
  const vec3 rayBegin = divW(vec4(vec3(tCoord, 0.f) * 2.f - 1.f, 1.f) * constants.perspectiveInverse) * constants.lookAtInverse;//fullTransform(instanceInfo, attrib.data[VERTEX_VERTICES], intersection.geometryId);
  const vec3 rayEnd = divW(vec4(vec3(tCoord, 1.f) * 2.f - 1.f, 1.f) * constants.perspectiveInverse) * constants.lookAtInverse;
  const vec3 rayDir = normalize(rayEnd.xyz - rayBegin.xyz);

  //
  RayData rayData;
  rayData.launchId = u16vec2(gcoord.xy);
  rayData.origin = rayBegin.xyz;
  rayData.direction = rayDir;
  rayData.energy = f16vec4(1.f.xxx, 1.f);
  rayData.emission = f16vec4(0.f.xxx, 1.f);

  //
#ifdef USE_RASTERIZE_PASS
  IntersectionInfo intersection = rasterize(instancedData.opaqueAddressInfo, rayData, 10000.f);
#else
  IntersectionInfo intersection = traceRaysOpaque(instancedData.opaqueAddressInfo, rayData, 10000.f);
#endif

  // 
  InstanceInfo instanceInfo = getInstance(instancedData.opaqueAddressInfo, intersection.instanceId);
  GeometryInfo geometryInfo = getGeometry(instanceInfo, intersection.geometryId);
  GeometryExtData geometry = getGeometryData(geometryInfo, intersection.primitiveId);
  GeometryExtAttrib attrib = interpolate(geometry, intersection.barycentric);

  //
  const vec3 rayOrigin = fullTransform(instanceInfo, attrib.data[VERTEX_VERTICES], intersection.geometryId).xyz;
  const vec4 texcoord = attrib.data[VERTEX_TEXCOORD];
  const vec4 tangent = attrib.data[VERTEX_TANGENT];

  //
  mat3x3 tbn = getTBN(attrib);
  MaterialPixelInfo materialPix = handleMaterial(getMaterialInfo(geometryInfo), texcoord.xy, tbn);
  const vec3 normals = inRayNormal(rayDir, fullTransformNormal(instanceInfo, materialPix.color[MATERIAL_NORMAL].xyz, intersection.geometryId));

  // 
  bool hasHit = !all(lessThanEqual(intersection.barycentric, 0.f.xxx));
  vec3 diffuseColor = toLinear(hasHit ? materialPix.color[MATERIAL_ALBEDO].xyz : 0.f.xxx);
  vec3 emissiveColor = toLinear(hasHit ? materialPix.color[MATERIAL_EMISSIVE].xyz : skyColor.xyz);
  float metallicFactor = hasHit ? materialPix.color[MATERIAL_PBR].b : 0.f;
  float roughnessFactor = hasHit ? materialPix.color[MATERIAL_PBR].g : 0.f;
  vec3 originSeedXYZ = vec3(random(rayData.launchId.xy), random(rayData.launchId.xy), random(rayData.launchId.xy));
  
  // 
  vec4 finalColor = vec4(emissiveColor, 1.f);
  
  //
  if (hasHit) {
    // 
    RayData diffRayData = rayData;
    diffRayData.direction.xyz = normalize(randomCosineWeightedHemispherePoint(originSeedXYZ, normals));
    diffRayData.origin = rayOrigin.xyz + outRayNormal(diffRayData.direction.xyz, normals.xyz) * 0.0001f;
    diffRayData.energy = f16vec4(1.f.xxx, 1.f);
    diffRayData.emission = f16vec4(0.f.xxx, 1.f);
    diffRayData = luminance(diffuseColor) >= 0.001f ? pathTrace(diffRayData) : diffRayData;

    // 
    RayData reflRayData = rayData;
    reflRayData.direction.xyz = reflective(originSeedXYZ, rayDir.xyz, normals.xyz, roughnessFactor);
    reflRayData.origin = rayOrigin.xyz + outRayNormal(reflRayData.direction.xyz, normals.xyz) * 0.0001f;
    reflRayData.energy = f16vec4(metallicMult(1.f.xxx, materialPix.color[MATERIAL_ALBEDO].xyz, metallicFactor), 1.f);;
    reflRayData.emission = f16vec4(0.f.xxx, 1.f);
    reflRayData = pathTrace(reflRayData);

    // I currently, have no time for fresnel
    finalColor = vec4(mix(vec3(diffuseColor.xyz * diffRayData.emission.xyz + emissiveColor), vec3(reflRayData.emission.xyz), hasHit ? (metallicFactor + fresnel_schlick(0.f, dot(-rayDir, normals)) * (1.f - metallicFactor)) : 0.f), 1.f);
  };

  //finalColor = vec4(toLinear(normals.xyz * 0.5f + 0.5f), 1.f);//vec4(!all(lessThanEqual(intersection.barycentric, 0.f.xxx)) ? 1.f.xxx : 0.f.xxx, 1.f);
  vec4 resultColor = imageLoad(images[pingpong.images[0]], ivec2(gcoord.x, extent.y-1-gcoord.y)) + max(fromLinear(finalColor), vec4(0.f.xxx, 1.f));
  imageStore(images[pingpong.images[0]], ivec2(gcoord.x, extent.y-1-gcoord.y), resultColor);

  // 
  imageStore(images[swapchain.image], ivec2(gcoord.x, extent.y-1-gcoord.y), vec4(resultColor.xyz / resultColor.w, 1.f));
  //imageStore(images[swapchain.image], ivec2(extent.x-1-gcoord.x, gcoord.y), fromLinear(finalColor));
  //imageStore(images[swapchain.image], ivec2(gcoord.x, gcoord.y), fromLinear(finalColor));
};
