#version 460 core

// 
#extension GL_GOOGLE_include_directive : require

//
#include "lib/native.glsl"
#include "lib/raytracing.glsl"

//
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// 
void main() {

  const vec3 rayOrigin = vec3(vec2(gl_GlobalInvocationID.xy)/vec2(1280.f,720.f), 0.f);
  const vec3 rayDir = vec3(0.f,0.f,1.f);
  vec4 payload = vec4(0.3f, 0.3f, 0.3f, 1.f);

  rayQueryEXT rayQuery;
  rayQueryInitializeEXT(rayQuery, accelerationStructureEXT(instancedData.opaqueAddressInfo.accelStruct), gl_RayFlagsTerminateOnFirstHitEXT|gl_RayFlagsOpaqueEXT, 0xff, rayOrigin, 0.001, rayDir, 100.0);

  while(rayQueryProceedEXT(rayQuery)) {
      rayQueryConfirmIntersectionEXT(rayQuery);
  };

  vec4 finalPosition = vec4(0.f.xxx,1.f);//texelFetch(textures[textureIndices[0]], ivec2(gl_GlobalInvocationID.xy), 0);
  if (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT) {
      vec2 attribs = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);
      payload = vec4(1.f - attribs.x - attribs.y, attribs.x, attribs.y, 1.f);
      finalPosition.xyz = rayQueryGetIntersectionObjectRayOriginEXT(rayQuery, true);
  };

  imageStore(images[swapchain.image], ivec2(gl_GlobalInvocationID.xy), finalPosition);
  //imageStore(images[imageIndices[currentImage]], ivec2(gl_GlobalInvocationID.xy), vec4(vec2(gl_GlobalInvocationID.xy)/vec2(1280.f,720.f), 0.f, 1.f));
};
