#version 460 core

// 
#extension GL_GOOGLE_include_directive : require

//
#include "lib/native.glsl"
#include "lib/raytracing.glsl"
#include "lib/random.glsl"
#include "lib/sphere.glsl"
#include "lib/fresnel.glsl"
#include "lib/pass.glsl"

//
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

//
vec3 proj_point_in_plane(in vec3 p, in vec3 v0, in vec3 n, out float d) {
  d = dot(n, p - v0);
  return p - (n * d);
};

//
vec3 find_reflection_incident_point(in vec3 p0, in vec3 p1, in vec3 v0, in vec3 n) {
  float d0 = 0;
  float d1 = 0;
  vec3 proj_p0 = proj_point_in_plane(p0, v0, n, d0);
  vec3 proj_p1 = proj_point_in_plane(p1, v0, n, d1);

  if(d1 < d0)
    return (proj_p0 - proj_p1) * d1/(d0+d1) + proj_p1;
  else
    return (proj_p1 - proj_p0) * d0/(d0+d1) + proj_p0;
};

// 
void main() {
  const uvec2 gcoord = gl_GlobalInvocationID.xy;
  const vec2 tCoord = vec2(gcoord)/vec2(extent);
  const uint pixelId = gcoord.x + extent.x * gcoord.y;

  // 
  const uvec4 prevIndices = pixelData.pixels[pixelId].surface.indices;
  const uvec4 prevReflIndices = pixelData.pixels[pixelId].reflection.indices;

  //
  const vec3 prevRayBegin = divW(vec4(vec3(tCoord, 0.f) * 2.f - 1.f, 1.f) * constants.perspectiveInverse) * constants.previousLookAtInverse;//fullTransform(instanceInfo, attrib.data[VERTEX_VERTICES], intersection.geometryId);
  const vec3 prevRayEnd = divW(vec4(vec3(tCoord, 1.f) * 2.f - 1.f, 1.f) * constants.perspectiveInverse) * constants.previousLookAtInverse;
  const vec3 prevPos = pixelData.pixels[pixelId].surface.origin.xyz;
  const vec3 prevRayDir = normalize(prevPos.xyz - prevRayBegin.xyz);
  const vec3 prevHitT = pixelData.pixels[pixelId].reflection.direction.xyz;
  const vec3 prevNormal = pixelData.pixels[pixelId].surface.normal.xyz;
  const vec3 prevReflPos = prevPos.xyz + pixelData.pixels[pixelId].reflection.direction.w * prevRayDir;

  //
  const vec3 currentPos = vec4(vec4(prevPos.xyz, 1.f) * inverse(getPrevInstanceTransform(instancedData.opaqueAddressInfo, prevIndices.x)), 1.f) * getInstanceTransform(instancedData.opaqueAddressInfo, prevIndices.x);
  const vec3 currentReflPos = vec4(vec4(prevReflPos.xyz, 1.f) * inverse(getPrevInstanceTransform(instancedData.opaqueAddressInfo, prevReflIndices.x)), 1.f) * getInstanceTransform(instancedData.opaqueAddressInfo, prevReflIndices.x);
  const vec3 currrentNormal = normalize(prevNormal.xyz * toNormalMat(getPrevInstanceTransform(instancedData.opaqueAddressInfo, prevIndices.x)) * toNormalMat(inverse(getInstanceTransform(instancedData.opaqueAddressInfo, prevIndices.x))));
  const vec3 currrentRayDir = normalize(prevRayDir.xyz * toNormalMat(getPrevInstanceTransform(instancedData.opaqueAddressInfo, prevIndices.x)) * toNormalMat(inverse(getInstanceTransform(instancedData.opaqueAddressInfo, prevIndices.x))));

  //
  const vec4 perspPos = vec4(vec4(currentPos.xyz, 1.f) * constants.lookAt, 1.f) * constants.perspective;
  const vec2 screenPos = (perspPos.xy/perspPos.w) * 0.5f + 0.5f;
  const ivec2 intScreenPos = ivec2(screenPos * vec2(extent));

  // 
  const float dist = distance(currentPos.xyz, currentReflPos.xyz);
  const vec3 foundIntersection = find_reflection_incident_point(prevReflPos.xyz, prevPos.xyz, currentReflPos.xyz, normalize(prevNormal.xyz)) - currrentRayDir.xyz * dist;//pixelData.pixels[pixelId].reflection.direction.w;
  //const vec3 foundIntersection = find_reflection_incident_point(prevPos.xyz, prevReflPos.xyz, currentPos.xyz, normalize(prevNormal.xyz));
  const vec4 perspIntersection = vec4(vec4(foundIntersection, 1.f) * constants.lookAt, 1.f) * constants.perspective;
  const vec2 reflScreenPos = perspIntersection.xy/perspIntersection.w * 0.5f + 0.5f;
  const ivec2 intWhereReflect = ivec2(reflScreenPos * vec2(extent));
  const vec4 sampledPos = vec4(texture(sampler2D(textures[framebufferAttachments[2]], samplers[0u]), screenPos, 0).xyz, 1.f);
  const vec4 reflSampledPos = vec4(texture(sampler2D(textures[framebufferAttachments[2]], samplers[0u]), reflScreenPos, 0).xyz, 1.f);

  //
  if (distance(reflSampledPos.xyz, foundIntersection.xyz) < 0.001f && intWhereReflect.x < extent.x && intWhereReflect.y < extent.y && pixelData.pixels[pixelId].reflection.color.w > 0.f) {
    uint pix = uint(intWhereReflect.x + intWhereReflect.y * extent.x);
    accumulateReflection(pix, cvtRgb16Float(pixelData.pixels[pixelId].reflection.color));
    pixelData.pixels[pix].reflection.actualDirection = vec4(currrentRayDir, dist);
  };
  if (distance(sampledPos.xyz, currentPos.xyz) < 0.001f && intScreenPos.x < extent.x && intScreenPos.y < extent.y && pixelData.pixels[pixelId].diffuse.color.w > 0.f) {
    uint pix = uint(intScreenPos.x + intScreenPos.y * extent.x);
    accumulateDiffuse(pix, cvtRgb16Float(pixelData.pixels[pixelId].diffuse.color)); // from previous diffuse
    pixelData.pixels[pix].surface.actualOrigin.xyz = currentPos.xyz;
    pixelData.pixels[pix].surface.actualNormal.xyz = currrentNormal.xyz;
  };

};
