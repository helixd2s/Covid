#version 460 core

// 
#extension GL_GOOGLE_include_directive : require

//
#include "lib/native.glsl"
#include "lib/fresnel.glsl"
#include "lib/random.glsl"
#include "lib/sphere.glsl"

//
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

//
vec3 proj_point_in_plane(in vec3 p, in vec3 v0, in vec3 n, out float d) { return p - ((d = dot(n, p - v0)) * n); };
vec3 find_reflection_incident_point(in vec3 p0, in vec3 p1, in vec3 v0, in vec3 n) {
  float d0 = 0; vec3 proj_p0 = proj_point_in_plane(p0, v0, n, d0);
  float d1 = 0; vec3 proj_p1 = proj_point_in_plane(p1, v0, n, d1);
  if(d1 < d0) { return (proj_p0 - proj_p1) * d1/(d0+d1) + proj_p1; }
         else { return (proj_p1 - proj_p0) * d0/(d0+d1) + proj_p0; };
};

//
vec4 fetchSrcPosRaw(in ivec2 srcInt) {
  PixelSurfaceInfoRef surf = getPixelSurface(uint(srcInt.x + srcInt.y * extent.x));
  return vec4(surf.origin.xyz, 1.f);
};

//
vec4 fetchSrcPos(in ivec2 srcInt) {
  PixelSurfaceInfoRef surf = getPixelSurface(uint(srcInt.x + srcInt.y * extent.x));
  vec4 center = vec4(surf.origin.xyz, 1.f);
  if (all(lessThanEqual(abs(center.xyz),0.f.xxx))) {
    center = (
      fetchSrcPosRaw(clamp(srcInt+ivec2(0,1),int(0).xx,ivec2(extent)-1)) + 
      fetchSrcPosRaw(clamp(srcInt+ivec2(1,0),int(0).xx,ivec2(extent)-1)) + 
      fetchSrcPosRaw(clamp(srcInt+ivec2(0,-1),int(0).xx,ivec2(extent)-1)) + 
      fetchSrcPosRaw(clamp(srcInt+ivec2(-1,0),int(0).xx,ivec2(extent)-1))
    ) / 4.f;
  };
  return divW(vec4(center * constants.previousLookAt, 1.f) * constants.perspective);
};

//
vec3 texSrcPos(in vec2 srcScreen) {
  return fetchSrcPos(clamp(ivec2(srcScreen*extent),int(0).xx,ivec2(extent)-1)).xyz;
};

//
vec3 linearSrcPos(in vec2 txy) {
  const vec2 txs = extent;
  const vec2 txd = 1.f/txs;
  const vec2 ttf = fract(txy*txs.xy - 0.49999f);
  const vec2 px = vec2(1.f-ttf.x,ttf.x), py = vec2(1.f-ttf.y,ttf.y);
  const mat2x2 i2 = outerProduct(px,py);
  const vec2 pix = clamp(txy-0.49999f*txd,0.f.xx,0.99999f.xx);
  const mat4x3 texels = mat4x3(
    texSrcPos(pix+vec2(0.f,  0.f)), texSrcPos(pix+vec2(txd.x,  0.f)),
    texSrcPos(pix+vec2(0.f,txd.y)), texSrcPos(pix+vec2(txd.x,txd.y))
  );
  return texels*vec4(i2[0],i2[1]);
};

//
void reproject3D(in uint hitId, in int type) {
  PixelHitInfoRef data = getNewHitInfo(hitId);
  PixelSurfaceInfoRef surface = getPixelSurface(data.idata.y);

  //
  const vec2 tCoord = vec2(data.idata.y % extent.x, data.idata.y / extent.x) / vec2(extent);

  //
  const vec3 srcRayBegin = divW(vec4(vec3(tCoord, 0.f) * 2.f - 1.f, 1.f) * constants.perspectiveInverse) * constants.previousLookAtInverse;//fullTransform(instanceInfo, attrib.data[VERTEX_VERTICES], intersection.geometryId);
  const vec3 srcRayEnd = divW(vec4(vec3(tCoord, 1.f) * 2.f - 1.f, 1.f) * constants.perspectiveInverse) * constants.previousLookAtInverse;
  const vec3 srcRayDir = normalize(srcRayEnd.xyz - srcRayBegin.xyz);
  const vec3 srcHitPos = data.origin.xyz + data.origin.w * srcRayDir;
  const vec3 srcPos = data.origin.xyz;
  const vec3 srcNormal = surface.normal.xyz;

  // 
  const vec3 dstPos = vec4(vec4(srcPos.xyz, 1.f) * inverse(getPreviousInstanceTransform(instancedData.opaqueAddressInfo, surface.indices.x)), 1.f) * getInstanceTransform(instancedData.opaqueAddressInfo, surface.indices.x);
  const vec3 dstHitPos = vec4(vec4(srcHitPos.xyz, 1.f) * inverse(getPreviousInstanceTransform(instancedData.opaqueAddressInfo, data.indices.x)), 1.f) * getInstanceTransform(instancedData.opaqueAddressInfo, data.indices.x);
  const vec3 dstNormal = normalize(srcNormal.xyz * toNormalMat(getPreviousInstanceTransform(instancedData.opaqueAddressInfo, surface.indices.x)) * toNormalMat(inverse(getInstanceTransform(instancedData.opaqueAddressInfo, surface.indices.x))));
  const vec3 dstRayDir = normalize(srcRayDir.xyz * toNormalMat(getPreviousInstanceTransform(instancedData.opaqueAddressInfo, surface.indices.x)) * toNormalMat(inverse(getInstanceTransform(instancedData.opaqueAddressInfo, surface.indices.x))));

  // 
  const vec3 dstHitFoundIntersection = type == 2 ? dstPos : (vec4(
    find_reflection_incident_point( 
      vec4(dstPos.xyz, 1.f) * constants.lookAt, 
      vec4(srcHitPos.xyz, 1.f) * constants.previousLookAt, 
      vec4(srcPos.xyz, 1.f) * constants.previousLookAt, 
      normalize(srcNormal.xyz)
    ), 1.f) * constants.lookAtInverse);

  // 
  const vec3 srcHitFoundIntersection = vec4(vec4(dstHitFoundIntersection, 1.f)
    * inverse(getInstanceTransform(instancedData.opaqueAddressInfo, surface.indices.x)), 1.f) 
    * getPreviousInstanceTransform(instancedData.opaqueAddressInfo, surface.indices.x);

  // 
  const vec4 srcHitPersp = vec4(vec4(srcHitFoundIntersection, 1.f) * constants.previousLookAt, 1.f) * constants.perspective;
  const vec2 srcScreen = (srcHitPersp.xy/srcHitPersp.w * 0.5f + 0.5f);
  const ivec2 srcInt = ivec2(srcScreen * vec2(extent));
  const uint srcId = uint(srcInt.x + srcInt.y * extent.x);
  const bool srcValid = srcInt.x < extent.x && srcInt.y < extent.y;

  // 
  const vec4 dstHitPersp = vec4(vec4(dstHitFoundIntersection, 1.f) * constants.lookAt, 1.f) * constants.perspective;
  const vec2 dstScreen = (dstHitPersp.xy/dstHitPersp.w * 0.5f + 0.5f);
  const ivec2 dstInt = ivec2(dstScreen * vec2(extent));
  const uint dstId = uint(dstInt.x + dstInt.y * extent.x);
  const bool dstValid = dstInt.x < extent.x && dstInt.y < extent.y;

  // 
  if (srcValid && dstValid) {
    bool srcFound = false, dstFound = false;
    bool srcOverhead = false, dstOverhead = false;

    //
    PixelSurfaceInfoRef HIT_SRC_SURF = getPixelSurface(srcId), HIT_DST_SURF = getPixelSurface(dstId);
    PixelHitInfoRef HIT_SRC = getNewHitInfo(HIT_SRC_SURF, type, srcFound), HIT_DST = rpjToSurface(HIT_DST_SURF, type, dstOverhead);

    //
    if (srcFound && !dstOverhead) {
      const vec4 dstSamplePos = texture(sampler2D(textures[framebufferAttachments[2]], samplers[0u]), dstScreen);
      const bool dstValidDist = all(lessThan(abs(dstSamplePos.xyz       -(dstHitPersp.xyz/dstHitPersp.w)), vec3(4.f/extent, 0.004f)));
      const bool srcValidDist = all(lessThan(abs(linearSrcPos(srcScreen)-(srcHitPersp.xyz/srcHitPersp.w)), vec3(8.f/extent, 0.008f)));

      // copy to dest, and nullify source
      if ( dstValidDist && (srcValidDist || HIT_DST.color.w <= 0.f) ) {
        HIT_DST.color = HIT_SRC.color;
        HIT_DST.origin = vec4(dstPos.xyz, distance(dstHitFoundIntersection.xyz, dstPos.xyz));
        HIT_DST.indices = HIT_SRC.indices;
        HIT_DST.idata.y = dstId;
        accumulateHit(HIT_DST_SURF, type, HIT_SRC_SURF.color[type]);
      };
    };
  };
};

// 
void main() {
  const uint threadId = gl_GlobalInvocationID.x;
  const uint threadCount = gl_WorkGroupSize.x*gl_NumWorkGroups.x;
  const uint hitInfoLimit = extent.x * extent.y * 3;
  for (uint T=threadId;T<previousCounters[PIXEL_COUNTER];T+=threadCount) {
    const uint hitId = T;
    if (hitId < hitInfoLimit) {
      reproject3D(hitId, 0); //barrier();
      reproject3D(hitId, 1); //barrier();
      reproject3D(hitId, 2); //barrier();
    };
  };
};
